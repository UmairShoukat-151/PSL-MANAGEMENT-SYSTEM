<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Matches Details</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css"
      integrity="sha512-b2QcS5SsA8tZodcDtGRELiGv5SaKSk1vDHDaQRda0htPYWZ6046lr3kJ5bAAQdpV2mmA/4v0wQF9MyU6/pDIAg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.min.js"
      integrity="sha512-WW8/jxkELe2CAiE4LvQfwm1rajOS8PHasCCx+knHG0gBHt8EXxS6T6tJRTGuDQVnluuAvMxWF4j8SNFDKceLFg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
      integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link rel="stylesheet" href="style.css" />
  </head>
  <body >
    <!-- Header Section -->
    <%- include ('headerdark') %>

    <!-- Main Content Section -->
    <div class="mx-auto mt-5 ">
      
<!-- Adding New visitor  -->
<div class="container  mx-auto p-1">
  <div class="container w-75 mb-5   mx-auto ">
  <h1 class="text-3xl font-bold mb-3">Reserve Ticket For the Next Match</h1>
  <form id="dataForm" action="/addviewer" method="POST" class=" " >
    <div class="mb-3">
      <label for="name" class="block mb-2 font-medium text-gray-900 dark:text-gray-300">Name</label>
      <input type="text" id="name" name="name" required placeholder="Write your Name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
    </div>
    <div class="mb-3">
      <label for="CNIC" class="block mb-2 font-medium text-gray-900 dark:text-gray-300">CNIC</label>
      <input type="number" id="id" name="id"  placeholder="CNIC without dash" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
    </div> 
      <div class="mb-3">
        <label for="phone" class="block mb-2 font-medium text-gray-900 dark:text-gray-300">Phone</label>
        <input type="number" id="phone" required placeholder="Mobile Number" name="phone" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
      </div>
      <div class="mb-3">
        <label for="tId" class="block mb-2 font-medium text-gray-900 dark:text-gray-300">Ticket Id(automatically generated)</label>
        <input type="text" id="tId" placeholder="it will automatically generate" name="tId" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
    </div>
   <button type="button" onclick="submitForm()" class="text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Add </button>
  </form>
</div>
  <div class="text-start ms-4 mb-8">
    <h1 class="text-4xl font-bold text-dark mb-4">Visitors Details</h1>
  </div>
      <div class="relative m-2">
        <table
          class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400"
        >
          <thead
            class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
          >
            <tr>
              <th scope="col" class="px-6 py-3">Name</th>
              <th scope="col" class="px-6 py-3">CNIC</th>
              <th scope="col" class="px-6 py-3">Phone</th>
              <th scope="col" class="px-6 py-3">Ticket ID</th>
            </tr>
          </thead>
          <tbody id="players-container"></tbody>
        </table>
      </div>
   
    </div>
    <%- include('footer') %>
    <!-- Ask question -->
    <%- include('askquestion') %>
   
    <!---------------------- JavaScript Section ------------------------------>
    <script>


  

// ___________________ fetch data displaying in the table________________
      const fetchData = async () => {
        try {
          const response = await fetch("/viewers", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(),
          });

          if (!response.ok) {
            throw new Error("Network response was not ok");
          }

          const playersData = await response.json();
          console.log(playersData);
          // Create HTML cards dynamically
          const playersContainer = document.getElementById("players-container");
          playersData.forEach((viewer) => {
            const card = document.createElement("tr");
            const eventId = viewer[4];
            card.id = `weddingCard-${eventId}`; // Add an id to the card
            card.className =
              "bg-gray-900  rounded-md m-3 overflow-hidden shadow-lg max-w-md mx-auto p-6 transform transition-transform hover:scale-105 cursor-pointer";

            card.innerHTML = `
            <td class="px-6 py-4">
        ${viewer[1]}
      </td>
      <td class="px-6 py-4">
        ${viewer[0]}
      </td>
      <td class="px-6 py-4">
        ${viewer[2]}
      </td>
      <td class="px-6 py-4">
        ${viewer[3]}
      </td>
      <td class="px-6 py-4">
        <button onclick="deleteWeddingEvent('${eventId}')" class="text-white bg-red-500 hover:bg-red-600 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-3 py-1 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Delete</button>
      </td>
    </tr>
`;

            //  add a subtle hover effect
            card.addEventListener("mouseenter", () => {
              card.classList.add(
                "transform",
                "scale-105",
                "transition-transform"
              );
            });
            card.addEventListener("mouseleave", () => {
              card.classList.remove("transform", "scale-105");
            });
            // Add the card to the container
            playersContainer.appendChild(card);
          });
        } catch (error) {
          console.error("Error fetching data:", error);
        }
      };
      document.addEventListener("DOMContentLoaded", fetchData);
 // Function to generate a random Ticket ID
 function generateRandomTicketId() {
        const min = 100000; // Adjust the minimum value as needed
        const max = 999999; // Adjust the maximum value as needed
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // Function to set the Ticket ID input field value on page load
    function setRandomTicketId() {
        const tIdInput = document.getElementById('tId');
        if (tIdInput) {
            tIdInput.value = generateRandomTicketId().toString();
        }
    }

    // Set the Ticket ID on page load
    document.addEventListener("DOMContentLoaded", setRandomTicketId);

    // _____________________For Adding New Viewer(Ticket)_________________________
      function submitForm() {
    const nameInput = document.getElementById('name');
    const idInput = document.getElementById('id');
    const phoneInput = document.getElementById('phone');
    const tIdInput = document.getElementById('tId');
    const name = nameInput.value;
    const id = idInput.value;
    const phone = phoneInput.value;
    const tId = tIdInput.value;

    const data = { name, id, phone, tId };
    fetch('/addviewer', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(result => {
        console.log(result);
        // Clear input fields
        nameInput.value = '';
        idInput.value = '';
        phoneInput.value = '';
        tIdInput.value = '';
        // Display success alert using Tailwind CSS classes
        showAlert('Successfully added! Refresh page and check your name in the list', 'bg-green-500', 'text-white');
    })
    .catch(error => {
        console.error('Error:', error);
        
    });
}

   // __________________________Function to delete a Viewer Data_________________________
    // Function to delete a Viewer Data
    async function deleteWeddingEvent(eventId) {
  try {
    const response = await fetch(`/deleteweddingevent/${eventId}`, {
      method: 'POST',
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const result = await response.json();
    console.log(result);

    // Handle success
    showAlert('Viewer deleted successfully', 'bg-green-500', 'text-white');

    // Remove the deleted card from the UI
    const deletedCard = document.getElementById(`weddingCard-${eventId}`);
    if (deletedCard) {
      deletedCard.remove();
    } else {
      console.error('Card not found for deletion:', eventId);
    }
  } catch (error) {
    console.error('Error:', error);
    // Handle error (e.g., display an error message to the user)
    showAlert('Error deleting Viewer ', 'bg-red-500', 'text-white');
  }
}
// function for show alert
function showAlert(message, bgClass, textClass) {
  const alertDiv = document.createElement('div');
  alertDiv.className = `fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-50 m-3 p-3 ${bgClass} ${textClass} rounded-md shadow-md z-50`;
  alertDiv.textContent = message;

  document.body.appendChild(alertDiv);

  // Remove the alert after a few seconds (adjust the timeout as needed)
  setTimeout(() => {
    document.body.removeChild(alertDiv);
  }, 5000);
}





    </script>


      <!-- make a search -->
      <div class="sys">
        <div class="container">
          <div class="row">
            <div class="col-md-12">
              <div class="search">
                <form action="/search" method="post">
                  <input type="text" name="search" placeholder="Search" />
                  <button type="submit" name="submit-search">Search</button>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
  </body>
</html>
